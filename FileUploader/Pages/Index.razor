@page "/"
@using Azure.Storage.Blobs;
@using Azure.Storage.Blobs.Models;
@using Azure.Storage.Queues;
@using MailKit.Net.Smtp;
@using MimeKit;
@inject IJSRuntime JSRuntime


<h1>Upload a .docx file</h1>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p>@ErrorMessage</p>
}
<head>
    <link rel="stylesheet" href="~/css/site.css" />
</head>
<form>
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" @bind="Email" required />
    <br />
    <label for="file">Choose a .docx file:</label>
    <InputFile OnChange="OnFileSelected" accept=".docx" required />
    <br />
    <button type="button" @onclick="OnSubmit">Upload</button>
</form>

@code {

    private string Email;
    private byte[] FileBytes;
    private string ErrorMessage;


    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.GetMultipleFiles().FirstOrDefault();
        if (file != null && file.ContentType == "application/vnd.openxmlformats-officedocument.wordprocessingml.document")
        {
            var memoryStream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(memoryStream);
            FileBytes = memoryStream.ToArray();

            ErrorMessage = null;
        }
        else
        {
            FileBytes = null;
            ErrorMessage = "Please choose a .docx file.";
        }
    }


    private async Task OnSubmit()
    {
        if (FileBytes == null || string.IsNullOrEmpty(Email))
        {
            ErrorMessage = "Please provide an email address and choose a .docx file.";
            return;
        }

        var connectionString = "DefaultEndpointsProtocol=https;AccountName=serhiytoroniywebapp;AccountKey=2MhpkDv4TUFh+tKjT6BBsDd7Ne64cTL4J0VNCR1frAOiea8rw9Zhtufqh0YNjjVBbzUiAILrnq1d+ASted9kuw==;EndpointSuffix=core.windows.net";
        var containerName = "files";
        var blobName = $"{Guid.NewGuid()}.docx";

        // Upload the file to Blob Storage
        var blobClient = new BlobClient(connectionString, containerName, blobName);
        var metadata = new Dictionary<string, string>()
        {
            {"email", Email}
        };
        await blobClient.UploadAsync(new MemoryStream(FileBytes), new BlobUploadOptions { Metadata = metadata });
        await JSRuntime.InvokeAsync<object>("alert", "File has been uploaded!");
    }
}
